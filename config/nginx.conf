# This is example contains the bare mininum to get nginx going with
# Unicorn or Rainbows! servers. Generally these configuration settings
# are applicable to other HTTP application servers (and not just Ruby
# ones), so if you have one working well for proxying another app
# server, feel free to continue using it.
#
# The only setting we feel strongly about is the fail_timeout=0
# directive in the "upstream" block. max_fails=0 also has the same
# effect as fail_timeout=0 for current versions of nginx and may be
# used in its place.
#
# Users are strongly encouraged to refer to nginx documentation for more
# details and search for other example configs.

# you generally only need one nginx worker unless you're serving
# large amounts of static files which require blocking disk reads
worker_processes 1;

# # drop privileges, root is needed on most systems for binding to port 80
# # (or anything < 1024). Capability-based security may be available for
# # your system and worth checking out so you won't need to be root to
# # start nginx to bind on 80
user ubuntu staff; # for systems with a "nogroup"
# user nobody nobody; # for systems with "nobody" as a group instead

# Feel free to change all paths to suit your needs here, of course
pid /tmp/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # "on" if nginx worker_processes > 1
  # use epoll; # enable for Linux 2.6+
  # use kqueue; # enable for FreeBSD, OSX
}

http {
  # nginx will find this file in the config directory set at nginx build time
  include mime.types;

  # fallback in case we can't determine a type
  default_type application/octet-stream;

  # click tracking!
  # access_log /tmp/nginx.access.log combined;

  # you generally want to serve static files with nginx since neither
  # Unicorn nor Rainbows! is optimized for it at the moment
  sendfile on;

  tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
  tcp_nodelay off; # on may be better for some Comet/long-poll stuff

  # we haven't checked to see if Rack::Deflate on the app server is
  # faster or not than doing compression via nginx. It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;    
  gzip_static on; # Serve pre-gzipped version when possible
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;
       
       
  # one ssl cache shared between all http requests. 10MB can store roughly 40k sessions
  ssl_session_cache shared:SSL:10m; 
  
  # tell nginx where to look for the .crt and .key files
  # ssl_certificate /etc/ssl/STAR_magoosh_com.crt;
  # ssl_certificate_key /etc/ssl/magoosh.key;

  # this can be any application server, not just Unicorn/Rainbows!
  upstream chinese_meds {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    # for TCP setups, point these to your backend servers
    # server 192.168.0.7:8080 fail_timeout=0;
    # server 192.168.0.8:8080 fail_timeout=0;
    # server 192.168.0.9:8080 fail_timeout=0;
    server 0.0.0.0:3000 fail_timeout=0;
  }
  
  server {
    listen 80 default;

    client_max_body_size 4G;
    server_name _;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    # path for static files
    root /u/apps/chinese_meds/current/public;

    # Try to serve assets directly
    location / {
      # an HTTP header important enough to have its own Wikipedia entry:
      # http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if and only if you use HTTPS, this helps Rack
      # set the proper protocol for doing redirects:
      # proxy_set_header X-Forwarded-Proto https;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # Try to serve static files from nginx, no point in making an
      # *application* server like Unicorn/Rainbows! serve static files.
      if (!-f $request_filename) {
        proxy_pass http://chinese_meds;
        break;
      }
    }
  }
  
  # server {
  #   listen 443 ssl; # Enables ssl for all requests to port 443
  #   
  #   client_max_body_size 4G;
  #   server_name _;
  # 
  #   # ~2 seconds is often enough for most folks to parse HTML/CSS and
  #   # retrieve needed images/icons/frames, connections are cheap in
  #   # nginx so increasing this is generally safe...
  #   keepalive_timeout 5;
  # 
  #   # path for static files
  #   root /u/apps/chinese_meds/current/public;
  # 
  #   # Try to serve assets directly
  #   location / {
  #     # an HTTP header important enough to have its own Wikipedia entry:
  #     # http://en.wikipedia.org/wiki/X-Forwarded-For
  #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  # 
  #     # enable this if and only if you use HTTPS, this helps Rack
  #     # set the proper protocol for doing redirects:
  #     proxy_set_header X-Forwarded-Proto https;
  # 
  #     # pass the Host: header from the client right along so redirects
  #     # can be set properly within the Rack application
  #     proxy_set_header Host $http_host;
  # 
  #     # we don't want nginx trying to do something clever with
  #     # redirects, we set the Host: header above already.
  #     proxy_redirect off;
  # 
  #     # Try to serve static files from nginx, no point in making an
  #     # *application* server like Unicorn/Rainbows! serve static files.
  #     if (!-f $request_filename) {
  #       proxy_pass http://chinese_meds;
  #       break;
  #     }
  #   }
  # }
  
  # Rails error pages
  # error_page 500 502 503 504 /500.html;
  # location = /500.html {
  #   root /home/deployer/myapp.com/current/public;
  # }
}